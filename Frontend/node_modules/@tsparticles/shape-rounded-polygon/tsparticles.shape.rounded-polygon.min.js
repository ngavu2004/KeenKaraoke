/*! For license information please see tsparticles.shape.rounded-polygon.min.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("@tsparticles/engine"));else if("function"==typeof define&&define.amd)define(["@tsparticles/engine"],t);else{var o="object"==typeof exports?t(require("@tsparticles/engine")):t(e.window);for(var r in o)("object"==typeof exports?exports:e)[r]=o[r]}}(this,(e=>(()=>{var t={303:t=>{t.exports=e}},o={};function r(e){var n=o[e];if(void 0!==n)return n.exports;var a=o[e]={exports:{}};return t[e](a,a.exports,r),a.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};r.r(n),r.d(n,{loadRoundedPolygonShape:()=>p});var a=r(303);const i=2*Math.PI,s=.5;class d{constructor(){this.validTypes=["rounded-polygon"]}draw(e){const{context:t,particle:o,radius:r}=e;!function(e,t,o){let r=t[0],n=t[1];const a=t.length;e.moveTo((r.x+n.x)*s,(r.y+n.y)*s);for(let i=1;i<=a;i++)r=n,n=t[(i+1)%a],e.arcTo(r.x,r.y,(r.x+n.x)*s,(r.y+n.y)*s,o)}(t,function(e,t,o=0){const r=i/e,n=[];for(let a=0;a<e;a++)n.push({x:Math.cos(a*r+o)*t,y:Math.sin(a*r+o)*t});return n}(o.sides,r),o.borderRadius??5)}getSidesCount(e){const t=e.shapeData;return Math.round((0,a.getRangeValue)(t?.sides??5))}particleInit(e,t){const o=t.shapeData;t.borderRadius=Math.round((0,a.getRangeValue)(o?.radius??5))*e.retina.pixelRatio}}async function p(e,t=!0){await e.addShape(new d,t)}return n})()));