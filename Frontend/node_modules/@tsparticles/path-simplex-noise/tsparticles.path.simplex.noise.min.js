/*! For license information please see tsparticles.path.simplex.noise.min.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("@tsparticles/engine"),require("@tsparticles/simplex-noise"));else if("function"==typeof define&&define.amd)define(["@tsparticles/engine","@tsparticles/simplex-noise"],t);else{var i="object"==typeof exports?t(require("@tsparticles/engine"),require("@tsparticles/simplex-noise")):t(e.window,e.window);for(var s in i)("object"==typeof exports?exports:e)[s]=i[s]}}(this,((e,t)=>(()=>{var i={303:t=>{t.exports=e},226:e=>{e.exports=t}},s={};function o(e){var t=s[e];if(void 0!==t)return t.exports;var n=s[e]={exports:{}};return i[e](n,n.exports,o),n.exports}o.d=(e,t)=>{for(var i in t)o.o(t,i)&&!o.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};o.r(n),o.d(n,{loadSimplexNoisePath:()=>f,simplexNoisePathName:()=>a});var r=o(303),h=o(226);const l={size:20,increment:.004,columns:0,rows:0,layers:0,width:0,height:0,offset:{x:4e4,y:4e4,z:4e4}};class p{constructor(){const e=new h.SimplexNoise;this._simplex=e.noise4d,this.field=[],this.noiseW=0,this.options=(0,r.deepExtend)({},l)}generate(e){const t=e.getPosition(),i=Math.max(Math.floor(t.x/this.options.size),0),s=Math.max(Math.floor(t.y/this.options.size),0),o=Math.max(Math.floor(t.z/this.options.size),0),n=r.Vector.origin;return this.field?.[i]?.[s]?.[o]?(n.setTo(this.field[i][s][o]),n):n}init(e){this.container=e,this._setup()}reset(){}update(){this.container&&(this._calculateField(),this.noiseW+=this.options.increment)}_calculateField(){const e=this.options;for(let t=0;t<e.columns;t++)for(let i=0;i<e.rows;i++)for(let s=0;s<e.layers;s++)this.field[t][i][s].angle=this._simplex.noise(t/50,i/50,s/50,this.noiseW)*Math.PI*2,this.field[t][i][s].length=this._simplex.noise(t/100+e.offset.x,i/100+e.offset.y,s/100+e.offset.z,this.noiseW)}_initField(){this.field=new Array(this.options.columns);for(let e=0;e<this.options.columns;e++){this.field[e]=new Array(this.options.rows);for(let t=0;t<this.options.rows;t++){this.field[e][t]=new Array(this.options.layers);for(let i=0;i<this.options.layers;i++)this.field[e][t][i]=r.Vector.origin}}}_resetField(){const e=this.container;if(!e)return;const t=e.actualOptions.particles.move.path.options;this.options.size=t.size>0?t.size:l.size,this.options.increment=t.increment>0?t.increment:l.increment,this.options.width=e.canvas.size.width,this.options.height=e.canvas.size.height;const i=t.offset;this.options.offset.x=i?.x??l.offset.x,this.options.offset.y=i?.y??l.offset.y,this.options.offset.z=i?.z??l.offset.z,this.options.seed=t.seed??l.seed,this._simplex.seed(this.options.seed??(0,r.getRandom)()),this.options.columns=Math.floor(this.options.width/this.options.size)+1,this.options.rows=Math.floor(this.options.height/this.options.size)+1,this.options.layers=Math.floor(e.zLayers/this.options.size)+1,this._initField()}_setup(){this.noiseW=0,this._resetField(),addEventListener("resize",(()=>this._resetField()))}}const a="simplexNoise";async function f(e,t=!0){await e.addPathGenerator(a,new p,t)}return n})()));